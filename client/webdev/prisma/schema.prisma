
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?    
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  blogs         Blog[]
  claps         Clap[]
  bookmark      Bookmark[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role UserRole @default(USER)
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model EmailVerification{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

enum UserRole{
  ADMIN
  USER
}
// ADDING A RELATIONSHIPE BETWEEN BLOG AND USER
model Blog{
  id String @id @default(cuid())
  userId String
  title String
  content String
  coverImage String
  isPublished Boolean @default(false)
  createdAt DateTime @default(now())
  tags String[]
  claps Clap[]
  bookmark Bookmark[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Clap {
  id String @id @default(cuid())
  userId String
  blogId String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
}

model Bookmark {
  id String @id @default(cuid())
  userId String
  blogId String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
}

